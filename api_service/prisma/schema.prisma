// binaryTargets = ["native", "darwin"]
generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["interactiveTransactions"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum GenderEnum {
  MALE
  FEMALE
  OTHER
}

enum UserRoleEnum {
  BASIC_USER
  ADMIN
}

model User {
  id                              String                        @id @default(uuid())
  cognitoSub                      String?
  email                           String                        @unique
  firstName                       String
  lastName                        String
  createdAt                       DateTime                      @default(now())
  updatedAt                       DateTime                      @updatedAt
  Report                          Report[]
  GiftDate                        GiftDate[]
  birthDate                       DateTime                      @db.Date
  gender                          GenderEnum
  userRole                        UserRoleEnum                  @default(BASIC_USER)
  org                             Org                           @relation(fields: [orgId], references: [id])
  orgId                           String
  GiftCardRequest                 GiftCardRequest[]
  GiftCard                        GiftCard[]
  claimPointsEventFulfillmentUser ClaimPointsEventFulfillment[] @relation("ClaimPointsEventFulfillment_user")
  OrgTransaction                  OrgTransaction[]
  BalanceSide                     BalanceSide[]

  @@index([email])
  @@index([cognitoSub])
}

enum GiftDateTypeEnum {
  HOLIDAY
  BIRTHDAY
  OTHER
}

enum GiftDateRecurrenceTypeEnum {
  MONTHLY
  YEARLY
  NONE
}

model GiftDate {
  id                 String                     @id @default(uuid())
  user               User                       @relation(fields: [userId], references: [id])
  userId             String
  createdAt          DateTime                   @default(now())
  updatedAt          DateTime                   @updatedAt
  type               GiftDateTypeEnum           @default(OTHER)
  recurrenceType     GiftDateRecurrenceTypeEnum @default(NONE)
  enabled            Boolean                    @default(true)
  title              String?
  firstAccuranceDate DateTime                   @db.Date
}

model ClaimPointsEvent {
  id             String           @id @default(uuid())
  validTo        DateTime
  description    String
  title          String
  OrgTransaction OrgTransaction[]
}

enum OrgTransactionTypeEnum {
  ORG_TO_EMPLOYEES
  ADMIN_TO_ORG
}

model OrgTransaction {
  id                          String                        @id @default(uuid())
  createdAt                   DateTime                      @default(now())
  type                        OrgTransactionTypeEnum
  totalAmount                 Int
  org                         Org                           @relation(fields: [orgId], references: [id])
  orgId                       String
  event                       ClaimPointsEvent?             @relation(fields: [eventId], references: [id])
  eventId                     String?
  createdBy                   User                          @relation(fields: [createdById], references: [id])
  createdById                 String
  ClaimPointsEventFulfillment ClaimPointsEventFulfillment[]
}

model ClaimPointsEventFulfillment {
  id               String         @id @default(uuid())
  createdAt        DateTime       @default(now())
  amount           Int
  orgTransaction   OrgTransaction @relation(fields: [orgTransactionId], references: [id])
  orgTransactionId String
  user             User           @relation("ClaimPointsEventFulfillment_user", fields: [userId], references: [id])
  userId           String
}

// monthlyAmount Decimal @db.Money
model Org {
  id             String           @id @default(uuid())
  name           String
  pointsPerMonth Int
  User           User[]
  OrgTransaction OrgTransaction[]
  BalanceSide    BalanceSide[]
}

enum IntegrationConsraintTypeEnum {
  MIN_MAX
  LIST
}

// constraint  Json
model GiftCardIntegration {
  id              String                       @id @default(uuid())
  website         String
  image           String
  title           String
  description     String
  constraintType  IntegrationConsraintTypeEnum
  priority        Int                          @default(1000000)
  constraintJson  Json
  GiftCardRequest GiftCardRequest[]
}

enum GiftCardRequestStatusEnum {
  PENDING
  COMPLETED
  DECLINED
}

model GiftCardRequest {
  id                    String                    @id @default(uuid())
  user                  User                      @relation(fields: [userId], references: [id])
  userId                String
  giftCardIntegration   GiftCardIntegration       @relation(fields: [giftCardIntegrationId], references: [id])
  giftCardIntegrationId String
  adminComment          String?
  amount                Int
  status                GiftCardRequestStatusEnum
  createdAt             DateTime                  @default(now())
  updatedAt             DateTime                  @updatedAt
  GiftCard              GiftCard?
}

model GiftCard {
  id                String          @id @default(uuid())
  createdBy         User            @relation(fields: [createdById], references: [id])
  createdById       String
  giftCardRequest   GiftCardRequest @relation(fields: [giftCardRequestId], references: [id])
  giftCardRequestId String          @unique
  description       String?
  url               String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum BalanceSideTypeEnum {
  USER_ACTIVE
  USER_RESERVED
  ORG
  PLATFORM
}

model BalanceSide {
  id         String              @id @default(uuid())
  type       BalanceSideTypeEnum
  user       User?               @relation(fields: [userId], references: [id])
  userId     String?
  org        Org?                @relation(fields: [orgId], references: [id])
  orgId      String?
  ladgerFrom Ledger[]            @relation("Ledger_from")
  ladgerTo   Ledger[]            @relation("Ledger_to")
}

enum LedgerTypeEnum {
  ORG_TO_EMPLOYEES
  ADMIN_TO_ORG
  GIFT_CARD_REQUEST_CREATED
  GIFT_CARD_REQUEST_COMPLETED
  GIFT_CARD_REQUEST_DECLINED
}

model Ledger {
  id          String         @id @default(uuid())
  type        LedgerTypeEnum
  amount      Int
  detailsJson Json
  from        BalanceSide    @relation("Ledger_from", fields: [fromId], references: [id])
  fromId      String
  to          BalanceSide    @relation("Ledger_to", fields: [toId], references: [id])
  toId        String
  createdAt   DateTime       @default(now())
}

model Report {
  id       String  @id @default(uuid())
  user     User?   @relation(fields: [userId], references: [id])
  userId   String?
  price    Int
  approved Boolean
  make     String
  model    String
}
